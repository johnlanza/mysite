<h1>My Book Summaries</h1>
<div class="container"></div>
<section>
  <% if (currentUser) { %>
  <a href="/books/newbook">Add a Book</a>
  <% } %>
  <p></p>
  <p>I'm adding all my book summaries here as I complete them. (And as time permits.)</p>
  <% for (let book of books) { %>
  <div class="book" id="book-<%= book._id %>">
    <div
      class="book-header"
      style="display: flex; justify-content: space-between">
      <section>
        <h3
          style="font-style: italic; cursor: pointer"
          onclick="toggleDetails('<%= book._id %>')">
          <%= book.title %>
        </h3>
        <h4
          style="font-style: italic; cursor: pointer; margin: 0"
          onclick="toggleDetails('<%= book._id %>')">
          by <%= book.author %>
        </h4>
      </section>
      <button
        class="toggle-btn"
        onclick="toggleDetails('<%= book._id %>')"
        style="
          background: none;
          border: none;
          cursor: pointer;
          font-size: 32px;
        ">
        ðŸ”½
      </button>
    </div>
    <div
      id="details-<%= book._id %>"
      class="book-details"
      style="display: none; margin-left: 20px">
      <p><strong>Summary:</strong> <%= book.summary %></p>
      <% if (book.notes) { %>
      <div class="notes" style="min-height: 100px"><%- book.notes %></div>
      <% } %>
      <p>
        <a href="<%= book.link %>" target="_blank">Goodreads</a>
        <a href="#" onclick="shareBook('<%= book._id %>'); return false;">
          Share
        </a>
        </p>
      </p>
      <% if (currentUser) { %>
      <p>
        <a href="/books/<%= book._id %>/editbook" style="margin-right: 10px"
          >Edit</a
        >
        <a href="#" onclick="deleteBook('<%= book._id %>')">Delete</a>
      </p>
      <% } %>
    </div>
  </div>
  <% } %> <% if (currentUser) { %>
  <a href="/books/newbook">Add a Book</a>
  <% } %>
</section>

<script>
  let currentExpanded = null;

  function toggleDetails(bookId) {
    const details = document.getElementById(`details-${bookId}`);
    const bookElement = document.getElementById(`book-${bookId}`);
    const isCurrentlyVisible = details.style.display === "block";

    // Hide the previously expanded content, if any
    if (currentExpanded && currentExpanded !== details) {
      currentExpanded.style.display = "none";
      const previousButton =
        currentExpanded.previousElementSibling.querySelector(".toggle-btn");
      if (previousButton) {
        previousButton.textContent = "ðŸ”½";
      }
    }

    // Toggle the clicked content
    if (!isCurrentlyVisible) {
      details.style.display = "block";
      const button =
        details.previousElementSibling.querySelector(".toggle-btn");
      if (button) {
        button.textContent = "ðŸ”¼";
      }
      currentExpanded = details;

      // Update the URL with both query param and anchor
      const url = new URL(window.location);
      url.searchParams.set("book", bookId);
      url.hash = bookId;
      window.history.pushState({}, "", url);

      // Scroll into view smoothly
      bookElement.scrollIntoView({ behavior: "smooth", block: "start" });
    } else {
      details.style.display = "none";
      const button =
        details.previousElementSibling.querySelector(".toggle-btn");
      if (button) {
        button.textContent = "ðŸ”½";
      }
      currentExpanded = null;

      // Remove book ID from URL when closed
      const url = new URL(window.location);
      url.searchParams.delete("book");
      url.hash = "";
      window.history.pushState({}, "", url);
    }
  }

  function shareBook(bookId) {
    const url = new URL(window.location);
    url.searchParams.set("book", bookId);
    url.hash = bookId;
    const shareableLink = url.href;

    // Copy to clipboard
    navigator.clipboard
      .writeText(shareableLink)
      .then(() => alert("Link copied to clipboard!"))
      .catch((err) => console.error("Error copying link:", err));
  }

  // Open and scroll to book if ID is in the URL
  window.onload = function () {
    const urlParams = new URLSearchParams(window.location.search);
    const bookId = urlParams.get("book");
    if (bookId) {
      toggleDetails(bookId);

      // Ensure scrolling to the book after opening
      setTimeout(() => {
        const bookElement = document.getElementById(`book-${bookId}`);
        if (bookElement) {
          bookElement.scrollIntoView({ behavior: "smooth", block: "start" });
        }
      }, 300); // Delay to ensure expansion happens first
    }
  };
</script>

<script>
  async function deleteBook(bookId) {
    try {
      const response = await fetch(`/books/${bookId}`, {
        method: "DELETE",
      });

      if (response.ok) {
        window.location.href = "/books";
      } else {
        console.error("Failed to delete book");
      }
    } catch (error) {
      console.error("Error deleting book:", error);
    }
  }
</script>
